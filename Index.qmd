---
title: "Prognosemodel - `r params$uitval`"
subtitle: "`r params$faculteit` | `r params$opleidingsnaam` (`r params$opleiding`) - `r params$opleidingsvorm`"

## Auteur en datum
author: "`r params$author`, De HHs"
date: last-modified

## Versie
versie: 1.0

## Format en output
output-file: "lta-hhs-tidymodels-uitval.html"

## Parameters        
params:
  uitval: "Uitval na 1 jaar"
  faculteit: "GVS"
  opleidingsnaam: "B Opleiding tot Verpleegkundige"
  opleiding: "HBO-V"
  opleidingsvorm: "voltijd"
  opleidingsvorm_afkorting: "VT"
  author: "Theo Bakker, lector Learning Technology & Analytics"
  
## Content
includes:
  inleiding:  true
  data:       true
  model_lr:   true
  model_rf:   true
  final_fit:  true
  conclusies: false
---

```{r setup, include = FALSE}

## Sluit het _Setup.R bestand in
source("_Setup.R")

## Config
sUitval_model <- params$uitval

## Maak de variabelen voor de huidige opleiding op basis van de opleidingsnaam en opleidingsvorm
current_opleiding <- Get_Current_opleiding(opleiding = params$opleiding, 
                                           opleidingsvorm = params$opleidingsvorm_afkorting)

## Bepaal op basis hiervan afgeleide variabelen
Set_Current_opleiding_vars(current_opleiding, debug = T)

## Bepaal op onderdelen of deze getoond moeten worden
bInclude_Model_LR    <- rmarkdown::metadata$includes$model_lr    ## Penalized Logistic Regression
bInclude_Model_RF    <- rmarkdown::metadata$includes$model_rf    ## Random Forest
bInclude_Final_fit   <- rmarkdown::metadata$includes$final_fit   ## Final Fit
bInclude_Conclusies  <- rmarkdown::metadata$includes$conclusies  ## Conclusies

## Maak een df om de resultaten per model in op te slaan
dfModel_results <- data.frame(
  model = character(),
  auc = numeric()
)

```

<!-- Inleiding -->

::: {.content-hidden unless-meta="includes.inleiding"}
# Inleiding

{{< include "01. Includes/qmdfiles/_01_Inleiding.qmd" >}}
:::

<!-- Data -->

# Voorbereidingen

{{< include "01. Includes/qmdfiles/_02_Data.qmd" >}}

<!-- MODEL I: Penalized Logistic Regression -->

::: {.content-hidden unless-meta="includes.model_lr"}
{{< include "01. Includes/qmdfiles/_03_Model_LR.qmd" >}}
:::

<!-- MODEL II: Random Forest -->

::: {.content-hidden unless-meta="includes.model_rf"}
{{< include "01. Includes/qmdfiles/_03_Model_RF.qmd" >}}
:::

<!-- Final Fit -->

::: {.content-hidden unless-meta="includes.final_fit"}
{{< include "01. Includes/qmdfiles/_04_Final_fit.qmd" >}}
:::

<!-- Conclusies -->

::: {.content-hidden unless-meta="includes.conclusies"}
<!-- {{< include "01. Includes/qmdfiles/_05_Conclusies.qmd" >}} -->
:::

<!-- Opschonen -->

```{r, echo = FALSE}

## Datasets
rm(
  dfOpleiding_inschrijvingen,
  dfSummary,
  dfUitval_test,
  dfUitval_train,
  dfUitval_validation,
  splits
  )

## Logistische regressie
if(bInclude_Model_LR) {
  rm(
    lr_auc,
    lr_auc_highest,
    lr_best,
    lr_mod,
    lr_plot,
    lr_recipe,
    lr_res,
    lr_workflow
  )
  if(sBest_model == "lr") {
    rm(last_lr_mod,
       last_lr_workflow)
  }
}

## Random Forest
if(bInclude_Model_RF) {
  rm(
    rf_auc,
    rf_auc_highest,
    rf_best,
    rf_mod,
    rf_recipe,
    rf_res,
    rf_workflow,
    last_rf_mod,
    last_rf_workflow
  )
  if(sBest_model == "rf") {
    rm(last_rf_mod,
       last_rf_workflow)
  }
}

## Final Fit
if(bInclude_Final_fit) {
  rm(
    last_fit
  )
}

## Conclusies
if(bInclude_Conclusies) {
  rm(
    top_models,
    dfTop_vif,
    lTop3_vif,
    lTop45_vif
    )
}

## Collect garbage
invisible(gc())
  
```
