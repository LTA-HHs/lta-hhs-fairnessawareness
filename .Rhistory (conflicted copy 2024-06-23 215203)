if(show_profiles) {
pdp_plot <- plot(pdp_lf, geom = "profiles")
} else {
pdp_plot <- plot(pdp_lf)
}
## Verwijder de bestaande kleurenschaal,
## zodat er geen waarschuwing komt over de bestaande kleurenschaal
#pdp_plot$scales$scales <- list()
## Bouw nu de plot verder op
pdp_plot <- pdp_plot +
# Voeg een enkele schaal toe voor de fill
scale_color_manual(
name = NULL,
values = .values
) +
# Pas de y-as schaal aan
scale_y_continuous(breaks = y_breaks,
labels = y_labels,
limits = c(0, 1)) +
# Pas de labels aan
labs(title = "Partial Dependence profielen",
subtitle = .subtitle,
y = NULL,
caption = sCaption) +
# Pas het thema aan
theme_minimal() +
theme(
axis.title.x = element_text(margin = margin(t = 20)),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
Set_LTA_Theme() +
# Voeg LTA elementen toe
Add_LTA_theme_elements(title_subtitle = TRUE) +
# Pas de positie van de legenda aan
theme(legend.position = "bottom") +
# Maak het grid iets rustiger
theme(panel.grid.minor = element_blank())
# Geef de plot terug
return(pdp_plot)
}
#| label: lf_pdp_all
#| echo: false
#| results: asis
set.seed(1134)
## Maak een PDP voor alle variabelen. Gebruik de variable_splits die we eerder hebben gemaakt
for (name in c("Alle studenten", "Geslacht", "Vooropleiding", "Aansluiting")) {
#for (name in c("Vooropleiding")) {
## Als recreateplots == T, maak dan een nieuwe plot
if(params$recreateplots) {
## Bewaar de plot
sPlotPath <- file.path(Get_Plot_outputpath(plotname = paste0("lf_pdp_",
tolower(name))))
## Maak een header
Knit_Header(name, 3)
if(name == "Alle studenten") {
## Maak het model profiel
pdp_lf <- model_profile(explainer = explain_lf,
variable_splits = variable_splits)
## Maak een Partial Dependence plot
pdp_plot <- Get_Partial_dependence_plot(pdp_lf, "all")
} else {
## Maak het model profiel
pdp_lf <- model_profile(explainer = explain_lf,
variable_splits = variable_splits,
groups = name)
## Maak een Partial Dependence plot per groep
pdp_plot <- Get_Partial_dependence_plot(pdp_lf, name)
}
## Sla de plot op
suppressWarnings(
Finalize_Plot(
plot_name = pdp_plot,
save_filepath = sPlotPath
))
## Print de bestaande plot
sPlot <- glue("![]({sPlotPath})")
Knit_print_rule(sPlot)
} else {
## Maak een header
Knit_Header(name, 3)
## Print de bestaande plot
sPlotPath <- file.path(Get_Plot_outputpath(plotname = paste0("lf_pdp_",
tolower(name))))
sPlot <- glue("![]({sPlotPath})")
Knit_print_rule(sPlot)
}
}
Get_Partial_dependence_plot <- function(pdp_lf,
name = "all",
show_profiles = TRUE) {
## Bepaal de y as
y_breaks <- seq(0, 1, by = 0.2)
y_labels <- paste0(seq(0, 100, by = 20), "%")
## Bepaal per variabele de kleurenschalen
if(name == "Geslacht") {
.values = lColors_geslacht
} else if (name == "Vooropleiding") {
.values = lColors_toelaatgevende_vooropleiding
} else if (name == "Aansluiting") {
.values = lColors_aansluiting
} else if (name == "all") {
.values = lColors_default[["sMetrics_blue"]]
}
## Bouw de subtitle
if(name == "all") {
.subtitle <- glue("Kans op retentie")
} else {
.subtitle <- glue("Kans op retentie naar **{tolower(name)}**")
}
## Verwijder in pdp_lf[["agr_profiles"]][["_label_"]] de naam van het model
.model <- explain_lf$label
pdp_lf[["agr_profiles"]][["_label_"]] <- gsub(paste0(.model, "_"),
"",
pdp_lf[["agr_profiles"]][["_label_"]])
# Plot de partial dependence analyse
if(show_profiles) {
pdp_plot <- plot(pdp_lf, geom = "profiles")
} else {
pdp_plot <- plot(pdp_lf)
}
## Verwijder de bestaande kleurenschaal,
## zodat er geen waarschuwing komt over de bestaande kleurenschaal
pdp_plot$scales$scales <- list()
## Bouw nu de plot verder op
pdp_plot <- pdp_plot +
# Voeg een enkele schaal toe voor de fill
scale_color_manual(
name = NULL,
values = .values
) +
# Pas de y-as schaal aan
scale_y_continuous(breaks = y_breaks,
labels = y_labels,
limits = c(0, 1)) +
# Pas de labels aan
labs(title = "Partial Dependence profielen",
subtitle = .subtitle,
y = NULL,
caption = sCaption) +
# Pas het thema aan
theme_minimal() +
theme(
axis.title.x = element_text(margin = margin(t = 20)),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
Set_LTA_Theme() +
# Voeg LTA elementen toe
Add_LTA_theme_elements(title_subtitle = TRUE) +
# Pas de positie van de legenda aan
theme(legend.position = "bottom") +
# Maak het grid iets rustiger
theme(panel.grid.minor = element_blank())
# Geef de plot terug
return(pdp_plot)
}
#| label: lf_pdp_all
#| echo: false
#| results: asis
set.seed(1134)
## Maak een PDP voor alle variabelen. Gebruik de variable_splits die we eerder hebben gemaakt
for (name in c("Alle studenten", "Geslacht", "Vooropleiding", "Aansluiting")) {
## Als recreateplots == T, maak dan een nieuwe plot
if(params$recreateplots) {
## Bewaar de plot
sPlotPath <- file.path(Get_Plot_outputpath(plotname = paste0("lf_pdp_",
tolower(name))))
## Maak een header
Knit_Header(name, 3)
if(name == "Alle studenten") {
## Maak het model profiel
pdp_lf <- model_profile(explainer = explain_lf,
variable_splits = variable_splits)
## Maak een Partial Dependence plot
pdp_plot <- Get_Partial_dependence_plot(pdp_lf, "all")
} else {
## Maak het model profiel
pdp_lf <- model_profile(explainer = explain_lf,
variable_splits = variable_splits,
groups = name)
## Maak een Partial Dependence plot per groep
pdp_plot <- Get_Partial_dependence_plot(pdp_lf, name)
}
## Sla de plot op
suppressWarnings(
Finalize_Plot(
plot_name = pdp_plot,
save_filepath = sPlotPath
))
## Print de bestaande plot
sPlot <- glue("![]({sPlotPath})")
Knit_print_rule(sPlot)
} else {
## Maak een header
Knit_Header(name, 3)
## Print de bestaande plot
sPlotPath <- file.path(Get_Plot_outputpath(plotname = paste0("lf_pdp_",
tolower(name))))
sPlot <- glue("![]({sPlotPath})")
Knit_print_rule(sPlot)
}
}
Get_Partial_dependence_plot <- function(pdp_lf,
name = "all",
show_profiles = TRUE) {
## Bepaal de y as
y_breaks <- seq(0, 1, by = 0.2)
y_labels <- paste0(seq(0, 100, by = 20), "%")
## Bepaal per variabele de kleurenschalen
if(name == "Geslacht") {
.values = lColors_geslacht
} else if (name == "Vooropleiding") {
.values = lColors_toelaatgevende_vooropleiding
} else if (name == "Aansluiting") {
.values = lColors_aansluiting
} else if (name == "all") {
.values = lColors_default[["sMetrics_blue"]]
}
## Bouw de subtitle
if(name == "all") {
.subtitle <- glue("Kans op retentie")
} else {
.subtitle <- glue("Kans op retentie naar **{tolower(name)}**")
}
## Verwijder in pdp_lf[["agr_profiles"]][["_label_"]] de naam van het model
.model <- explain_lf$label
pdp_lf[["agr_profiles"]][["_label_"]] <- gsub(paste0(.model, "_"),
"",
pdp_lf[["agr_profiles"]][["_label_"]])
# Plot de partial dependence analyse
if(show_profiles) {
pdp_plot <- plot(pdp_lf, geom = "profiles")
} else {
pdp_plot <- plot(pdp_lf)
}
## Verwijder de bestaande kleurenschaal,
## zodat er geen waarschuwing komt over de bestaande kleurenschaal
pdp_plot$scales$scales <- list()
## Bouw nu de plot verder op
pdp_plot <- pdp_plot +
# Voeg een enkele schaal toe voor de fill
scale_color_manual(
name = NULL,
values = .values
) +
# Pas de y-as schaal aan
scale_y_continuous(breaks = y_breaks,
labels = y_labels,
limits = c(0, 1)) +
# Pas de labels aan
labs(title = "Partial Dependence profielen",
subtitle = .subtitle,
y = NULL,
caption = sCaption) +
# Pas het thema aan
theme_minimal() +
theme(
axis.title.x = element_text(margin = margin(t = 20)),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
Set_LTA_Theme() +
# Voeg LTA elementen toe
Add_LTA_theme_elements(title_subtitle = TRUE) +
# Pas de positie van de legenda aan
theme(legend.position = "bottom") +
# Maak het grid iets rustiger
theme(panel.grid.minor = element_blank()) +
# Maak de kopjes van de facetten groter
theme(strip.text = element_text(size = 12))
# Geef de plot terug
return(pdp_plot)
}
Get_Partial_dependence_plot <- function(pdp_lf,
name = "all",
show_profiles = TRUE) {
## Bepaal de y as
y_breaks <- seq(0, 1, by = 0.2)
y_labels <- paste0(seq(0, 100, by = 20), "%")
## Bepaal per variabele de kleurenschalen
if(name == "Geslacht") {
.values = lColors_geslacht
} else if (name == "Vooropleiding") {
.values = lColors_toelaatgevende_vooropleiding
} else if (name == "Aansluiting") {
.values = lColors_aansluiting
} else if (name == "all") {
.values = lColors_default[["sMetrics_blue"]]
}
## Bouw de subtitle
if(name == "all") {
.subtitle <- glue("Kans op retentie")
} else {
.subtitle <- glue("Kans op retentie naar **{tolower(name)}**")
}
## Verwijder in pdp_lf[["agr_profiles"]][["_label_"]] de naam van het model
.model <- explain_lf$label
pdp_lf[["agr_profiles"]][["_label_"]] <- gsub(paste0(.model, "_"),
"",
pdp_lf[["agr_profiles"]][["_label_"]])
# Plot de partial dependence analyse
if(show_profiles) {
pdp_plot <- plot(pdp_lf, geom = "profiles")
} else {
pdp_plot <- plot(pdp_lf)
}
## Verwijder de bestaande kleurenschaal,
## zodat er geen waarschuwing komt over de bestaande kleurenschaal
pdp_plot$scales$scales <- list()
## Bouw nu de plot verder op
pdp_plot <- pdp_plot +
# Voeg een enkele schaal toe voor de fill
scale_color_manual(
name = NULL,
values = .values
) +
# Pas de y-as schaal aan
scale_y_continuous(breaks = y_breaks,
labels = y_labels,
limits = c(0, 1)) +
# Pas de labels aan
labs(title = "Partial Dependence profielen",
subtitle = .subtitle,
y = NULL,
caption = sCaption) +
# Pas het thema aan
theme_minimal() +
theme(
axis.title.x = element_text(margin = margin(t = 20)),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
Set_LTA_Theme() +
# Voeg LTA elementen toe
Add_LTA_theme_elements(title_subtitle = TRUE) +
# Pas de positie van de legenda aan en verberg de titel
theme(legend.position = "bottom",
legend.title = element_blank()) +
# Maak het grid iets rustiger
theme(panel.grid.minor = element_blank()) +
# Maak de kopjes van de facetten groter
theme(strip.text = element_text(size = 12))
# Geef de plot terug
return(pdp_plot)
}
#| label: setup
## Sluit het _Setup.R bestand in
source("_Setup.R")
#| label: load_data
## Bepaal de paden
sData_outputpath         <- Get_Model_outputpath(mode = "data")
sFittedmodels_outputpath <- Get_Model_outputpath(mode = "last-fits")
sModelresults_outputpath <- Get_Model_outputpath(mode = "modelresults")
## Laad de data voor de opleiding: data, last fits en model results
dfOpleiding_inschrijvingen <- rio::import(sData_outputpath, trust = TRUE)
lLast_fits                 <- rio::import(sFittedmodels_outputpath, trust = TRUE)
dfModel_results            <- rio::import(sModelresults_outputpath, trust = TRUE)
# Pas de Retentie variabele aan naar numeric (0/1),
# zodat er een explainer van gemaakt kan worden
dfOpleiding_inschrijvingen$Retentie <- as.numeric(dfOpleiding_inschrijvingen$Retentie) - 1
## Maak een lijst van dfPersonas
lDfPersona <- list()
## Loop over de variabelen
lDfPersona <- map(c("Geslacht", "Vooropleiding", "Aansluiting"),
~ Get_dfPersona(.x)) |>
set_names(c("Geslacht", "Vooropleiding", "Aansluiting"))
## Laad de persona's
dfPersona_all <- Get_dfPersona()
#| label: fitted_model
sBest_model <- dfModel_results$model[dfModel_results$number == 1]
last_fit    <- lLast_fits[[sBest_model]]
fitted_model <- last_fit |>
extract_fit_parsnip()
## Controleer of de coefficienten van het model numeriek zijn
coefs <- tidy(fitted_model)$estimate
# Controleer of de coëfficiënten numeriek zijn
if (!is.numeric(coefs)) {
stop("De geëxtraheerde coëfficiënten zijn niet numeriek.")
}
#| label: lf_explainer
## Extraheer het fitted model en de workflow
fitted_model <- last_fit |>
extract_fit_parsnip()
workflow <- last_fit |>
extract_workflow()
# Maak een explainer
explain_lm <- DALEXtra::explain_tidymodels(
model = workflow,
data = dfOpleiding_inschrijvingen |> select(-Retentie),
y = dfOpleiding_inschrijvingen |> pull(Retentie),
colorize = TRUE,
verbose = FALSE,
label = "Linear Regression"
)
#| label: bias_analysis
#| results: asis
## Maak een fairness analyse
for(name in c("Geslacht", "Vooropleiding", "Aansluiting")) {
## Groep
Knit_Header(glue("{name}"), 3)
if(name == "Geslacht") {
sPrivileged <- "V"
} else if(name == "Vooropleiding") {
sPrivileged <- "HAVO"
} else if(name == "Aansluiting") {
sPrivileged <- "Direct"
}
## Maak een fairness object
fobject <- Get_objFairness(explain_lm, name, sPrivileged)
## Maak een tabel van de fairness analyse
dfFairness_totaal <- Get_dfFairness_totaal(fobject)
## Check of er bias is
Print_Fairness_object_LTA(fobject)
# Knit_print_rule(suppressWarnings(print(fobject, colorize = FALSE)))
#
## Maak een plot van de fairness analyse
fairness_plot <- suppressWarnings(
Get_Fairness_plot(fobject, group = name, privileged = sPrivileged) +
theme(panel.border = element_rect(
colour = "darkgrey",
fill = NA,
size = 0.4
))
)
## Bewaar de plot
sPlotname <- glue("fairness_plot_{tolower(name)}")
sPlotPath <- Get_Plot_outputpath(sPlotname, mode = "plot")
suppressWarnings(
Finalize_Plot(
plot_name = fairness_plot,
save_filepath = sPlotPath,
height_pixels = 250 + (50 * length(unique(dfFairness_totaal$Categorie)))
))
## Toon de bestaande plot
sPlot <- glue("![]({sPlotPath})")
Knit_print_rule(sPlot)
}
#| label: bias_analysis_density
#| results: asis
plot_density(fobject)
## Functie om een fairness plot t emaken
Get_Density_plot <- function(fairness_object, group) {
## Bepaal de y as
y_breaks <- seq(-100, 100, by = 0.2)
#y_labels <- paste0(seq(0, 100, by = 20), "%")
## Maak een density plot
density_plot <- fairness_object |>
plot() +
theme_minimal() +
Set_LTA_Theme() +
## Voeg titel en subtitel toe
labs(
title = "Verdeling en dichtheid van kansen",
subtitle = glue("Voor **{group}**"),
caption = sCaption,
x = NULL,
y = NULL)
## Verwijder de bestaande kleurenschaal,
## zodat er geen waarschuwing komt over de bestaande kleurenschaal
density_plot$scales$scales <- list()
# Bouw de plot verder op
density_plot <- density_plot +
## Bepaal de kleur
scale_fill_manual(
values = c("#466F9D")
) +
# Pas de y-as schaal aan
scale_y_continuous(breaks = y_breaks) +
## Voeg LTA elementen toe
Add_LTA_theme_elements(title_subtitle = TRUE) +
## Pas een aantal thema elementen aan
theme(
panel.grid.minor = element_blank(),
legend.position = "none",
strip.text = element_text(hjust = 0)
)
return(density_plot)
}
Get_Density_plot <- function(fairness_object, group) {
## Bepaal de y as
y_breaks <- seq(0, 1, by = 0.2)
y_labels <- paste0(seq(0, 100, by = 20), "%")
## Maak een density plot
density_plot <- fairness_object |>
plot_density() +
theme_minimal() +
Set_LTA_Theme() +
## Voeg titel en subtitel toe
labs(
title = "Verdeling en dichtheid van kansen",
subtitle = glue("Voor **{group}**"),
caption = sCaption,
x = NULL,
y = NULL)
## Verwijder de bestaande kleurenschaal,
## zodat er geen waarschuwing komt over de bestaande kleurenschaal
density_plot$scales$scales <- list()
# Bouw de plot verder op
density_plot <- density_plot +
## Bepaal de kleur
scale_fill_manual(
values = c("#466F9D")
) +
# Pas de y-as schaal aan
scale_y_continuous(breaks = y_breaks) +
## Voeg LTA elementen toe
Add_LTA_theme_elements(title_subtitle = TRUE) +
## Pas een aantal thema elementen aan
theme(
panel.grid.minor = element_blank(),
legend.position = "none",
strip.text = element_text(hjust = 0)
)
return(density_plot)
}
